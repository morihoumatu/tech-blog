---
interface Props {
  data: any[];
  rows: string[];
  columns: string[];
  values: string[];
  aggregator?: (values: any[]) => number;
}

const {
  data,
  rows = [],
  columns = [],
  values = [],
  aggregator = (values) => values.reduce((sum, val) => sum + (Number(val) || 0), 0)
} = Astro.props;

// ピボットテーブルのデータを生成
function generatePivotData(data: any[]) {
  const pivotData = new Map();
  const uniqueColumns = new Set();

  // データの集計
  data.forEach(item => {
    const rowKey = rows.map(r => item[r]).join('-');
    const colKey = columns.map(c => item[c]).join('-');
    uniqueColumns.add(colKey);

    if (!pivotData.has(rowKey)) {
      pivotData.set(rowKey, new Map());
    }
    
    const rowData = pivotData.get(rowKey);
    if (!rowData.has(colKey)) {
      rowData.set(colKey, []);
    }
    
    rowData.get(colKey).push(...values.map(v => item[v]));
  });

  return {
    pivotData,
    uniqueColumns: Array.from(uniqueColumns).sort()
  };
}

const { pivotData, uniqueColumns } = generatePivotData(data);
---

<div class="overflow-x-auto">
  <table class="min-w-full bg-white border border-gray-200">
    <thead>
      <tr class="bg-gray-50">
        <!-- 行ヘッダー -->
        {rows.map(row => (
          <th class="px-4 py-2 text-left text-sm font-semibold text-gray-600 border-b border-r">{row}</th>
        ))}
        
        <!-- 列ヘッダー -->
        {uniqueColumns.map(col => (
          <th class="px-4 py-2 text-right text-sm font-semibold text-gray-600 border-b">{col}</th>
        ))}
        
        <!-- 合計列 -->
        <th class="px-4 py-2 text-right text-sm font-semibold text-gray-600 border-b bg-gray-100">合計</th>
      </tr>
    </thead>
    <tbody>
      {Array.from(pivotData.entries()).map(([rowKey, rowData]) => (
        <tr class="hover:bg-gray-50">
          {/* 行の値 */}
          {rowKey.split('-').map(value => (
            <td class="px-4 py-2 text-left text-sm text-gray-900 border-b border-r">{value}</td>
          ))}
          
          {/* データセル */}
          {uniqueColumns.map(colKey => {
            const values = rowData.get(colKey) || [];
            return (
              <td class="px-4 py-2 text-right text-sm text-gray-900 border-b">
                {aggregator(values).toLocaleString()}
              </td>
            );
          })}
          
          {/* 行合計 */}
          <td class="px-4 py-2 text-right text-sm font-semibold text-gray-900 border-b bg-gray-50">
            {Array.from(rowData.values())
              .flat()
              .reduce((sum, val) => sum + (Number(val) || 0), 0)
              .toLocaleString()}
          </td>
        </tr>
      ))}
      
      {/* 列合計行 */}
      <tr class="bg-gray-50">
        {rows.map(() => (
          <td class="px-4 py-2 text-left text-sm font-semibold text-gray-600 border-b border-r">合計</td>
        ))}
        
        {uniqueColumns.map(colKey => {
          const colTotal = Array.from(pivotData.values())
            .map(rowData => rowData.get(colKey) || [])
            .flat()
            .reduce((sum, val) => sum + (Number(val) || 0), 0);
          
          return (
            <td class="px-4 py-2 text-right text-sm font-semibold text-gray-900 border-b">
              {colTotal.toLocaleString()}
            </td>
          );
        })}
        
        {/* 総合計 */}
        <td class="px-4 py-2 text-right text-sm font-semibold text-gray-900 border-b bg-gray-100">
          {Array.from(pivotData.values())
            .flatMap(rowData => Array.from(rowData.values()).flat())
            .reduce((sum, val) => sum + (Number(val) || 0), 0)
            .toLocaleString()}
        </td>
      </tr>
    </tbody>
  </table>
</div>